#!/usr/bin/python
# bulk2x-ncnn-vulkan
# Version 1.0
# Nicholas Girga
# Released under GPL3 with ABSOLUTELY NO WARRANTY

# Simple GUI to make it easy to use waifu2x with individual files and whole directories

### imports
import gi, os, sys, subprocess
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from os.path import expanduser
from gi.repository import GdkPixbuf

### define main class
class Main:

    # define consts
    FILE_FILTER_NAMES = ["Portable Network Graphics Format (*.png)", "Joint Photographic Experts Group Format (*.jpeg, *.jpg)"]
    FILE_FILTER_PATTERNS = ["*.png", "*.jpeg"]

    # define vars
    use_directories = False
    input_path = ""
    output_path = ""

    # initialize glade file
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.gladefile = "./main.glade"
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)
        self.window = self.builder.get_object("window0")
        self.window.set_icon_name("window")
        self.window.present()
        
    # quit with cancel
    def on_window0_destroy(self, object, data=None):
        self.main_loop_running = False
        Gtk.main_quit()

    # simple popup window
    def create_simple_message_dialog(self, text, title="bulk2x", yesno=False, window=None):
        message = Gtk.MessageDialog(window, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.YES_NO if yesno else Gtk.ButtonsType.OK, text)
        message.set_title(title)
        message.set_icon_name("window")
        response = message.run()
        message.destroy()
        return response

    # called when switching between file and directory mode (true = directory mode)
    def set_use_directories(self, value):
        # get widgets
        input_file_label = self.builder.get_object("input_file_label")
        input_file_display = self.builder.get_object("input_file_display")
        output_file_label = self.builder.get_object("output_file_label")
        output_file_display = self.builder.get_object("output_file_display")
        
        # change widgets
        input_file_label.set_property("label", "Input " + ("Directory" if value else "File") + ":")
        input_file_display.set_property("placeholder_text", "$input_" + ("directory" if value else "file"))
        output_file_label.set_property("label", "Output " + ("Directory" if value else "File") + ":")
        output_file_display.set_property("placeholder_text", "$output_" + ("directory" if value else "file"))
        
        # set var
        self.use_directories = value

    # show save dialog and return the file destination path
    def on_save(self, use_filter=False, filter_name=[], filter_pattern=[]) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog("Please choose where to save file", self.window,
        Gtk.FileChooserAction.SAVE, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
        Gtk.STOCK_SAVE, Gtk.ResponseType.OK))
        dialog.set_property("do_overwrite_confirmation", True)
        i = 0
        if (use_filter):
            for f in filter_name:
                filter_obj = Gtk.FileFilter()
                filter_obj.set_name(f)
                filter_obj.add_pattern(filter_pattern[i])
                if (filter_pattern[i] == "*.jpeg"):
                    filter_obj.add_pattern("*.jpg")
                if (filter_pattern[i] == "*.jpg"):
                    filter_obj.add_pattern("*.jpeg")
                dialog.add_filter(filter_obj)
                i += 1

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path
        elif response == Gtk.ResponseType.CANCEL:
            dialog.destroy()
            return ""
        
        # just in case :P
        dialog.destroy()
    
    # show open dialog and return the desired file or directory path (default to files)
    def on_open(self, directories=False, use_filter=False, filter_name=[], filter_pattern=[]) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog("Please choose a file" if not directories else "Please choose a folder", self.window,
        Gtk.FileChooserAction.OPEN if not directories else Gtk.FileChooserAction.SELECT_FOLDER, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
        Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        i = 0
        if (use_filter):
            for f in filter_name:
                filter_obj = Gtk.FileFilter()
                filter_obj.set_name(f)
                filter_obj.add_pattern(filter_pattern[i])
                if (filter_pattern[i] == "*.jpeg"):
                    filter_obj.add_pattern("*.jpg")
                if (filter_pattern[i] == "*.jpg"):
                    filter_obj.add_pattern("*.jpeg")
                dialog.add_filter(filter_obj)
                i += 1

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path if file_path != None else ""
        dialog.destroy()
        return ""

    # sets the input_path var and updates display
    def set_input_path(self, _input_path: str):
        # get widgets
        input_file_display = self.builder.get_object("input_file_display")
        
        # set vars and update displays
        self.input_path = _input_path
        input_file_display.set_text(self.input_path)
        
    # sets the output_path var and updates display
    def set_output_path(self, _output_path: str):
        # get widgets
        output_file_display = self.builder.get_object("output_file_display")
        
        # set vars and update displays
        self.output_path = _output_path
        output_file_display.set_text(self.output_path)
        

    # called when the file button in the header bar is clicked
    def file_button_clicked(self, popover, data=None):
        popover.popup()
        
    # called when about_button is pressed
    def about_button_clicked(self, object, data=None):
        about = Gtk.AboutDialog()
        about.set_program_name("bulk2x")
        about.set_version("1.0")
        about.set_property("authors", ["Nicholas Girga"])
        about.set_comments("Simple GUI to make it easy to use waifu2x with individual files and whole directories")
        about.set_website("http://gitlab.com/nickgirga/bulk2x-ncnn-vulkan")
        about.set_website_label("gitlab.com/nickgirga/bulk2x-ncnn-vulkan")
        about.set_license_type(Gtk.License.GPL_3_0)
        about.set_logo_icon_name("window")
        about.set_icon_name("window")
        
        about.run()
        about.destroy()
        
    # called when the use_directory_switch is toggled
    def use_directories_switch_state_set(self, object, data=None):
        self.set_input_path("")
        self.set_output_path("")
        self.set_use_directories(object.get_property("active"))
        
    # called when the settings_expander is clicked (temporary)
    def settings_expander_button_press_event(self, object, data=None):
        object.set_expanded(False)
        self.create_simple_message_dialog("Settings are still in development")
        
    # called when the open_file_button next to the input file/directory is clicked
    def open_file_button_clicked(self, object, data=None):
        _desired_file = self.on_open(self.use_directories, not self.use_directories, self.FILE_FILTER_NAMES, self.FILE_FILTER_PATTERNS)
        if (_desired_file != None and _desired_file != ""):
            self.set_input_path(_desired_file)
            
    def save_file_button_clicked(self, object, data=None):
        _file_destination = self.on_save(not self.use_directories, self.FILE_FILTER_NAMES, self.FILE_FILTER_PATTERNS) if not self.use_directories else self.on_open(self.use_directories)
        if (_file_destination != None and _file_destination != ""):
            self.set_output_path(_file_destination)
            
        
### start
# create main instance
if __name__ == "__main__":
    main = Main()
    Gtk.main()
