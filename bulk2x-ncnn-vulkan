#!/usr/bin/python3
# bulk2x-ncnn-vulkan
# Version 1.0
# Nicholas Girga
# Released under GPL3 with ABSOLUTELY NO WARRANTY

# Simple GUI to make it easy to use waifu2x-ncnn-vulkan

### imports
import gi, os, sys, subprocess
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from threading import Thread
from os.path import expanduser
from gi.repository import GdkPixbuf

### define main class
class Main:

    # define consts
    FILE_FILTER_NAMES = ["Portable Network Graphics Format (*.png)", "Joint Photographic Experts Group Format (*.jpeg, *.jpg)"]
    FILE_FILTER_PATTERNS = ["*.png", "*.jpeg"]
    LOCAL_GLADE_FILE_PATH = "./main.glade"
    SYSTEM_GLADE_FILE_PATH = "/usr/share/bulk2x-ncnn-vulkan/main.glade"
    LOCAL_ICON_FILE_PATH = "./res/icon.svg"
    SYSTEM_ICON_FILE_PATH = "/usr/share/bulk2x-ncnn-vulkan/res/icon.svg"
    LOCAL_LOGO_FILE_PATH = "./res/logo.png"
    SYSTEM_LOGO_FILE_PATH = "/usr/share/bulk2x-ncnn-vulkan/res/logo.png"

    SYS_BASE_COMMAND = "waifu2x-ncnn-vulkan"
    LOCAL_BASE_COMMAND = "./waifu2x-ncnn-vulkan-20210210-ubuntu/waifu2x-ncnn-vulkan"
    BASE_COMMAND_OPTIONS = "-i {input} -o {output}"

    # define vars
    use_directories = False
    input_path = ""
    output_path = ""

    # initialize glade file
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        if (os.path.isfile(self.LOCAL_GLADE_FILE_PATH)):
            self.gladefile = self.LOCAL_GLADE_FILE_PATH
        elif (os.path.isfile(self.SYSTEM_GLADE_FILE_PATH)):
            self.gladefile = self.SYSTEM_GLADE_FILE_PATH
        else:
            self.create_simple_message_dialog("ERR: no \"main.glade\" file found at \"" + self.SYSTEM_GLADE_FILE_PATH + "\" or at \"" + self.LOCAL_GLADE_FILE_PATH + "\" in the working directory", "bulk2x - Error")
            sys.exit()
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)
        self.window = self.builder.get_object("window0")
        if (os.path.isfile(self.LOCAL_ICON_FILE_PATH)):
            self.window.set_icon_from_file(self.LOCAL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_ICON_FILE_PATH)):
            self.window.set_icon_from_file(self.SYSTEM_ICON_FILE_PATH)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_ICON_FILE_PATH + "\" in the working directory.","bulk2x - Error")
            self.window.set_icon_name("window")
        self.window.present()

        # set the default command
        self.builder.get_object("command_textbox").set_text(self.get_base_command())

    # returns the base command without input/output paths
    def get_base_command(self) -> str:
        try:
            subprocess.run([self.SYS_BASE_COMMAND, "-h"], capture_output=True)
            return self.SYS_BASE_COMMAND + " " + self.BASE_COMMAND_OPTIONS
        except Exception as e:
            print("System command failed!\n" + str(e))

        try:
            subprocess.run([self.LOCAL_BASE_COMMAND, "-h"], capture_output=True)
            return self.LOCAL_BASE_COMMAND + " " + self.BASE_COMMAND_OPTIONS
        except Exception as e:
            print("Local command failed!\n" + str(e))

        response = self.create_simple_message_dialog("Failed to run waifu2x-ncnn-vulkan! Do you want to download the binaries from GitHub (Release 20210210)?", "bulk2x - Error", True)
        if (response == Gtk.ResponseType.YES):
            self.create_simple_message_dialog("Downloading and extracting binaries from GitHub. The application may stop responding until the download and extraction is complete. This will depend on the speed of your internet and CPU.")

            try:
                subprocess.run(["wget", "https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download/20210210/waifu2x-ncnn-vulkan-20210210-ubuntu.zip"])
            except Exception as e:
                self.create_simple_message_dialog("Failed to download from GitHub!\n" + str(e), "bulk2x - Error")
                sys.exit()
                
            try:
                subprocess.run(["unzip", "waifu2x-ncnn-vulkan-20210210-ubuntu.zip"])
            except Exception as e:
                self.create_simple_message_dialog("Failed to unzip archive from GitHub!\n" + str(e), "bulk2x - Error")
                sys.exit()

            try:
                os.remove("waifu2x-ncnn-vulkan-20210210-ubuntu.zip")
            except Exception as e:
                self.create_simple_message_dialog("Failed to remove unzipped archive!\n" + str(e), "bulk2x - Error")
                sys.exit()

            return self.LOCAL_BASE_COMMAND + " " + self.BASE_COMMAND_OPTIONS

        sys.exit()

    # quit with cancel
    def on_window0_destroy(self, object, data=None):
        self.main_loop_running = False
        Gtk.main_quit()

    # simple popup window
    def create_simple_message_dialog(self, text, title="bulk2x", yesno=False, window=None):
        message = Gtk.MessageDialog(parent=window, flags=0, message_type=Gtk.MessageType.INFO, buttons=(Gtk.ButtonsType.YES_NO if yesno else Gtk.ButtonsType.OK), text=text)
        message.set_title(title)
        if (os.path.isfile(self.LOCAL_ICON_FILE_PATH)):
            message.set_icon_from_file(self.LOCAL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_ICON_FILE_PATH)):
            message.set_icon_from_file(self.SYSTEM_ICON_FILE_PATH)
        else:
            print("ERR: No icon found at \"" + self.SYSTEM_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_ICON_FILE_PATH + "\" in the working directory.")
            message.set_icon_name("window")
        response = message.run()
        message.destroy()
        return response

    # add text to details_text text buffer
    def add_to_details_log(self, text: str, new_line=True, print_to_terminal=True):
        # print to terminal
        if (print_to_terminal):
            print(text)
    
        # get widget
        details_text = self.builder.get_object("details_text")

        # save old details_text text and concatenate with text var
        old_text = details_text.get_property("text")
        details_text.set_text(old_text + text + ("\n" if new_line else ""))

    # called when switching between file and directory mode (true = directory mode)
    def set_use_directories(self, value: bool):
        # get widgets
        input_file_label = self.builder.get_object("input_file_label")
        output_file_label = self.builder.get_object("output_file_label")

        # change widgets
        input_file_label.set_property("label", "Input " + ("Directory" if value else "File") + ":")
        output_file_label.set_property("label", "Output " + ("Directory" if value else "File") + ":")

        # set var
        self.use_directories = value

    # show save dialog and return the file destination path
    def on_save(self, use_filter=False, filter_name=[], filter_pattern=[]) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog(title="Please choose where to save file", parent=self.window, action=Gtk.FileChooserAction.SAVE)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK)
        dialog.set_property("do_overwrite_confirmation", True)
        i = 0
        if (use_filter):
            for f in filter_name:
                filter_obj = Gtk.FileFilter()
                filter_obj.set_name(f)
                filter_obj.add_pattern(filter_pattern[i])
                if (filter_pattern[i] == "*.jpeg"):
                    filter_obj.add_pattern("*.jpg")
                if (filter_pattern[i] == "*.jpg"):
                    filter_obj.add_pattern("*.jpeg")
                dialog.add_filter(filter_obj)
                i += 1

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path
        dialog.destroy()
        return ""

    # show open dialog and return the desired file or directory path (default to files)
    def on_open(self, directories=False, use_filter=False, filter_name=[], filter_pattern=[]) -> str:
        # create and setup dialog
        dialog = Gtk.FileChooserDialog(title=("Please choose a file" if not directories else "Please choose a folder"), parent=self.window, action=(Gtk.FileChooserAction.OPEN if not directories else Gtk.FileChooserAction.SELECT_FOLDER))
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
        i = 0
        if (use_filter):
            for f in filter_name:
                filter_obj = Gtk.FileFilter()
                filter_obj.set_name(f)
                filter_obj.add_pattern(filter_pattern[i])
                if (filter_pattern[i] == "*.jpeg"):
                    filter_obj.add_pattern("*.jpg")
                if (filter_pattern[i] == "*.jpg"):
                    filter_obj.add_pattern("*.jpeg")
                dialog.add_filter(filter_obj)
                i += 1

        # show dialog
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            dialog.destroy()
            return file_path if file_path != None else ""
        dialog.destroy()
        return ""

    # allow start_button to be clicked if both an input path and an output path are defined
    def check_input_output(self):
        # get widget
        start_button = self.builder.get_object("start_button")

        # check vars and set start_button sensitivity and tooltip
        paths_filled = self.input_path != "" and self.input_path != None and self.output_path != "" and self.output_path != None
        start_button.set_property("sensitive", paths_filled)
        start_button.set_tooltip_text("Both the input and output must be set before starting" if not paths_filled else "")

    # sets the input_path var and updates display
    def set_input_path(self, _input_path: str):
        # get widget
        input_file_display = self.builder.get_object("input_file_display")

        # set var and update display
        self.input_path = _input_path
        input_file_display.set_text(self.input_path)

        self.check_input_output()

    # sets the output_path var and updates display
    def set_output_path(self, _output_path: str):
        # get widget
        output_file_display = self.builder.get_object("output_file_display")

        # set var and update display
        self.output_path = _output_path
        output_file_display.set_text(self.output_path)     

        self.check_input_output()   

    # returns the base command with input/output paths as a list
    def get_command(self, _input: str, _output: str) -> []:
        # get widget
        command_textbox = self.builder.get_object("command_textbox")

        # split command by spaces
        split_command = command_textbox.get_text().split()

        # replace {input} and {output} and return
        input_output_dic = {"{input}": _input, "{output}": _output}
        return [input_output_dic.get(i, i) for i in split_command]

    # replicates the folder structure of root_dir into destination_root_dir
    def create_dir_structure(self, root_dir: str, destination_root_dir: str):
        temp0 = []
        d = os.listdir(root_dir)
        for f in d:
            source_dir = root_dir + "/" + f
            destination_dir = destination_root_dir + "/" + f
            if (os.path.isdir(source_dir)):
                try:
                    os.makedirs(destination_dir)
                except Exception as e:
                    self.create_simple_message_dialog("Failed to create directory!\n" + str(e), "bulk2x - Error")
                
                self.create_dir_structure(source_dir, destination_dir)

    # return a list of files within a directory recursively
    def get_files_in_dir(self, dir: str) -> []:
        temp0 = []
        d = os.listdir(dir)
        for f in d:
            file = dir + "/" + f
            if (os.path.isfile(file)):
                temp0.append(file)
            elif (os.path.isdir(file)):
                temp1 = self.get_files_in_dir(file)
                for g in temp1:
                    temp0.append(g)
        return temp0

    # join the command for cosmetic purposes
    def join_command(self, command: []) -> str:
        command_string = ""
        for i in range(0, len(command)):
            if (i == 2 or i == 4):
                command_string += "\"" + command[i] + ("\" " if i == 2 else "\"")
                continue
            command_string += command[i] + " "
        return command_string

    # upscale image using the parameters set in the command var
    def upscale_image(self, command: []):
        # log command and execute it
        self.add_to_details_log("> " + self.join_command(command) + "\n")
        output = subprocess.run(command, capture_output=True)
        self.add_to_details_log(output.stderr.decode('utf-8'))
        
        # log when finished
        self.add_to_details_log("Finished processing file!\n")

    # called when the file button in the header bar is clicked
    def file_button_clicked(self, popover, data=None):
        popover.popup()

    # called when about_button is pressed
    def about_button_clicked(self, object, data=None):
        about = Gtk.AboutDialog()
        about.set_program_name("bulk2x")
        about.set_version("1.0")
        about.set_property("authors", ["Nicholas Girga"])
        about.set_comments("Simple GUI to make it easy to use waifu2x-ncnn-vulkan")
        about.set_website("http://gitlab.com/nickgirga/bulk2x-ncnn-vulkan")
        about.set_website_label("gitlab.com/nickgirga/bulk2x-ncnn-vulkan")
        about.set_license_type(Gtk.License.GPL_3_0)
        pixbuf = GdkPixbuf.Pixbuf()
        if (os.path.isfile(self.LOCAL_LOGO_FILE_PATH)):
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.LOCAL_LOGO_FILE_PATH)
            about.set_logo(pixbuf)
        elif (os.path.isfile(self.SYSTEM_LOGO_FILE_PATH)):
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.SYSTEM_LOGO_FILE_PATH)
            about.set_logo(pixbuf)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_LOGO_FILE_PATH + "\" or at \"" + self.LOCAL_LOGO_FILE_PATH + "\" in the working directory.", "bulk2x - Error")
            about.set_logo_icon_name("window")
        if (os.path.isfile(self.LOCAL_ICON_FILE_PATH)):
            about.set_icon_from_file(self.LOCAL_ICON_FILE_PATH)
        elif (os.path.isfile(self.SYSTEM_ICON_FILE_PATH)):
            about.set_icon_from_file(self.SYSTEM_ICON_FILE_PATH)
        else:
            self.create_simple_message_dialog("ERR: No icon found at \"" + self.SYSTEM_ICON_FILE_PATH + "\" or at \"" + self.LOCAL_ICON_FILE_PATH + "\" in the working directory.","bulk2x - Error")
            about.set_icon_name("window")

        about.run()
        about.destroy()

    # called when the use_directory_switch is toggled
    def use_directories_switch_state_set(self, object, data=None):
        self.set_input_path("")
        self.set_output_path("")
        self.set_use_directories(object.get_property("active"))

    # called when the open_file_button next to the input file/directory is clicked
    def open_file_button_clicked(self, object, data=None):
        _desired_file = self.on_open(self.use_directories, not self.use_directories, self.FILE_FILTER_NAMES, self.FILE_FILTER_PATTERNS)
        if (_desired_file != None and _desired_file != ""):
            self.set_input_path(_desired_file)

    # called when the save_file_button next to the output file/directory is clicked
    def save_file_button_clicked(self, object, data=None):
        _file_destination = self.on_save(not self.use_directories, self.FILE_FILTER_NAMES, self.FILE_FILTER_PATTERNS) if not self.use_directories else self.on_open(self.use_directories)
        if (_file_destination != None and _file_destination != ""):
            self.set_output_path(_file_destination)

    # called when the start_button is toggled
    def start_button_toggled(self, object, data=None):
        if (object.get_property("active")):
            # start button depressed
            if (not self.use_directories):
                # check if input_path is a file
                if (not os.path.isfile(self.input_path)):
                    self.create_simple_message_dialog("Input path must be set to a file when \"Use directories\" is disabled", "bulk2x - Error")
                    return

                # check if output_path is a directory
                if (os.path.isdir(self.output_path)):
                    self.create_simple_message_dialog("Output path must be set to a file when \"Use directories\" is disabled", "bulk2x - Error")
                    return

                # get command and upscale image
                command = self.get_command(self.input_path, self.output_path)
                thread = Thread(target=self.upscale_image(command))
                thread.start()
                # to-do: fix threading/halting; implement progress bar
                
                # set start_button to inactive
                object.set_property("active", False)
            else:
                # check if input_path is a directory
                if (not os.path.isdir(self.input_path)):
                    self.create_simple_message_dialog("Input path must be set to a directory when \"Use directories\" is enabled", "bulk2x - Error")
                    return

                # check if output_path is a directory
                if (not os.path.isdir(self.output_path)):
                    self.create_simple_message_dialog("Output path must be set to a directory when \"Use directories\" is enabled", "bulk2x - Error")
                    return

                # create the folder structure within the destination directory
                try:
                    self.create_dir_structure(self.input_path, self.output_path)
                except Exception as e:
                    self.add_to_details_log("Failed to create folder structure!\n" + str(e))
                    return

                # get files in directory at input_path
                files = self.get_files_in_dir(self.input_path)
                for f in files:
                    # for each file in the directory at input_path, get command and upscale image
                    command = self.get_command(f, self.output_path + f[len(self.input_path):])
                    thread = Thread(target=self.upscale_image(command))
                    thread.start()
                    # to-do: fix threading/halting; implement progress bar
                    
                # set start_button to inactive
                object.set_property("active", False)
        else:
            # start button raised
            print("*Stopping waifu2x-ncnn-vulkan loop*")
            # to-do: kill loop
        
### start
# create main instance
if __name__ == "__main__":
    main = Main()
    Gtk.main()
